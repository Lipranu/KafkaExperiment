@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Monitor</PageTitle>
<h1>Awesome Factory Monitor!!!</h1>
<table class="table">
    <thead>
        <tr>
            <th scope="col">ID</th>
            <th scope="col">State</th>
            <th scope="col">Status</th>
            <th scope="col">Control</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var info in infos)
        {
            <tr>
                <td>@info.ID.ToString()</td>
                <td>@info.State.ToString()</td>
                <td>@info.Status.ToString()</td>
                <td>@if (info.State != FactoryState.Broken)
                    {
                        var text = info.State == FactoryState.Running ? "Turn Off" : "Turn On";
                        <button @onclick="_ => InvokeMessage(info.ID)">@text</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code  
{
    private HubConnection? hubConnection;
    private List<FactoryInfo> infos = new();
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://monitor:443/factory_info_hub", conf =>
            {
                conf.HttpMessageHandlerFactory = _ => new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                };
            })
            .Build();

        hubConnection.On<FactoryInfo>("SendInfo", info =>
        {
            var exist = false;
            infos.ForEach(row =>
            {
                if (row.ID == info.ID)
                {
                    row.State = info.State;
                    row.Status = info.Status;
                    exist = true;
                }
            });

            if (!exist)
            {
                infos.Add(info);
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async Task InvokeMessage(Guid id)
    {
        if (hubConnection is not null)
        {
            await hubConnection!.InvokeAsync("Switch", id);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
